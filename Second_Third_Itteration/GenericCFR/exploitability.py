def calc_ev(p1_strat, p2_strat, cards, history, player):
    if is_terminal(history):
        return -get_reward(history, cards[1],cards[0])
    my_card = cards[player]
    next_player = (player + 1) % 2
    if player == 0:
        strat = p1_strat[str(my_card) + " " + history]
    else:
        strat = p2_strat[str(my_card) + " " + history]
    next_evs = [calc_ev(p1_strat, p2_strat, cards, history + a, next_player) for a in ACTION_DICT]
    return -np.dot(strat, next_evs)

def calc_best_response(node_map, br_strat_map, br_player, cards, history, player, prob):
    if is_terminal(history):
        return -get_reward(history, cards[1],cards[0])
    key = str(cards[player]) + " " + history
    next_player = (player + 1) % 2
    if player == br_player:
        vals = [calc_best_response(node_map, br_strat_map, br_player, cards, history + action,
                                   next_player, prob) for action in ACTION_DICT]
        best_response_value = max(vals)
        if key not in br_strat_map:
            br_strat_map[key] = np.array([0.0, 0.0])
        br_strat_map[key] = br_strat_map[key] + prob * np.array(vals, dtype=np.float64)
        return -best_response_value
    else:
        strategy = node_map[key].get_average_strategy()
        action_values = [calc_best_response(node_map, br_strat_map, br_player, cards,
                                             history + action, next_player, prob * strategy[ix])
                         for ix, action in enumerate(ACTION_DICT)]
        return -np.dot(strategy, action_values)

def compute_exploitability(node_map):
    deck = [0,1,2]
    exploitability = 0
    br_strat_map = {}
    for cards in itertools.permutations(deck):
        calc_best_response(node_map, br_strat_map, 0, cards, '', 0, 1.0)
        calc_best_response(node_map, br_strat_map, 1, cards, '', 0, 1.0)
    for k,v in br_strat_map.items():
        v[:] = np.where(v == np.max(v), 1, 0)
    cfr_strategy = {k: v.get_average_strategy() for k,v in node_map.items()}
    for cards in itertools.permutations(deck):
        ev_1 = calc_ev(cfr_strategy, br_strat_map, cards, '', 0)
        ev_2 = calc_ev(br_strat_map, cfr_strategy, cards, '', 0)
        exploitability += 1/6 * (ev_1 - ev_2)
    return exploitability, br_strat_map